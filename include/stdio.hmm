/*
 * Programing Language C-- "Compiler"
 *    Tokuyama kousen Advanced educational Computer.
 *
 * Copyright (C) 2016 - 2019 by
 *                      Dept. of Computer Science and Electronic Engineering,
 *                      Tokuyama College of Technology, JAPAN
 *
 *   上記著作権者は，Free Software Foundation によって公開されている GNU 一般公
 * 衆利用許諾契約書バージョン２に記述されている条件を満たす場合に限り，本ソース
 * コード(本ソースコードを改変したものを含む．以下同様)を使用・複製・改変・再配
 * 布することを無償で許諾する．
 *
 *   本ソースコードは＊全くの無保証＊で提供されるものである。上記著作権者および
 * 関連機関・個人は本ソースコードに関して，その適用可能性も含めて，いかなる保証
 * も行わない．また，本ソースコードの利用により直接的または間接的に生じたいかな
 * る損害に関しても，その責任を負わない．
 *
 *
 */

/*
 * include/stdio.hmm : lib/stdio.cmm, lib/printf.cmm の外部インタフェース
 *
 * 2019.03.14 : fputs()，puts()の型をbooleanに変更
 * 2019.03.13 : lToL 削除
 * 2019.03.12 : <cfunc.hmm> のインクルードはコンパイラドライバが指示する
 * 2018.11.17 : lToL 追加
 * 2018.02.20 : fseek 追加
 * 2016.02.26 : 新規作成
 *
 * $Id$
 */

#ifdef C
// C トランスレータの場合
typedef FILE;

#else
// TacOS の場合
#define lToL(x) (x)         // lToL はC言語の printf などを使用するために必要
struct FILE {
  int fd;                   // ファイルディスクリプタ
  int mode;                 // オープンモード
  char[] buf;               // 読み書き用のバッファ
  int size;                 // バッファサイズ
  int len;                  // バッファに現在格納しているバイト数(READ時のみ)
  int cnt;                  // バッファの現在位置
  boolean tty;              // '\n'でバッファをフラッシュすべきか
  boolean eof;              // EOF になった
  boolean err;              // エラーが発生して使えない状態になった
  int slot;                 // allFiles 配列で自分が登録された位置
};

public void _stdioInit();                  // stdio の初期化
public void _flushAll();                   // 全ての書き込みバッファフラッシュ
public void _perror(char[] msg, int err);  // エラー番号でメッセージを出力

struct Dir {
    char[] name;
    int    attr;
    int    clst;
    int    lenH, lenL;
};
public int readDir(int fd, Dir dir);
#endif

// C トランスレータ、TacOS で共通
public FILE stdin;
public FILE stdout;
public FILE stderr;

public boolean feof(FILE stream);
public boolean ferror(FILE stream);
public boolean fflush(FILE stream);
public boolean fseek(FILE stream, int h, int l);
public boolean fsize(char[] path, int[] size);

public FILE fopen(char[] name, char[] mode);
public boolean fclose(FILE stream);

public boolean fputc(char c, FILE stream);
public boolean putchar(char c);
public boolean fputs(char[] s, FILE stream);
public boolean puts(char[] s);

public char fgetc(FILE stream);
public char getchar();
public char[] fgets(char[] s, int n, FILE stream);
public void perror(char[] s);

public int fprintf(FILE stream, char[] format, ...);
public int printf(char[] format, ...);
