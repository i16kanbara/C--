/*
 * Programing Language C-- "Compiler"
 *    Tokuyama kousen Advanced educational Computer.
 *
 * Copyright (C) 2016 - 2019 by
 *                      Dept. of Computer Science and Electronic Engineering,
 *                      Tokuyama College of Technology, JAPAN
 *
 *   上記著作権者は，Free Software Foundation によって公開されている GNU 一般公
 * 衆利用許諾契約書バージョン２に記述されている条件を満たす場合に限り，本ソース
 * コード(本ソースコードを改変したものを含む．以下同様)を使用・複製・改変・再配
 * 布することを無償で許諾する．
 *
 *   本ソースコードは＊全くの無保証＊で提供されるものである。上記著作権者および
 * 関連機関・個人は本ソースコードに関して，その適用可能性も含めて，いかなる保証
 * も行わない．また，本ソースコードの利用により直接的または間接的に生じたいかな
 * る損害に関しても，その責任を負わない．
 *
 *
 */

/*
 * lib/string.cmm : 文字列操作
 *
 * 2019.03.11 : 実行時エラーチェック対応（subStr()廃止）
 * 2016.03.08 : strStr のバグ訂正
 * 2016.02.26 : 新規作成
 *
 * $Id$
 */

#include <string.hmm>

// 文字列コピー
public char[] strCpy(char[] d, char[] s) {
  for (int i=0; (d[i]=s[i])!='\0'; i=i+1)
    ;
  return d;
}

// 文字数制限付きの文字列コピー(n文字未満コピー）
public char[] strNcpy(char[] d, char[] s, int n) {
  int i=0;
  for (; i<n-1 && s[i]!='\0'; i=i+1)
    d[i]=s[i];
  for (;i<n; i=i+1)
    d[i]='\0';
  return d;
}

// 文字列結合
public char[] strCat(char[] d, char[] s) {
  int i=0;
  while (d[i]!='\0')
    i=i+1;
  for (int j=i; (d[i]=s[i-j])!='\0'; i=i+1)
    ;
  return d;
}

// 文字数制限付きの文字列結合（n文字未満を追加）
public char[] strNcat(char[] d, char[] s, int n) {
  int i=0;
  while (d[i]!='\0')
    i=i+1;
  for (int j=0; j<n-1 && s[j]!='\0'; i=i+1,j=j+1)
    d[i]=s[j];
  d[i]='\0';
  return d;
}

// 文字列比較
public int strCmp(char[] s1, char[] s2) {
  int i;
  for (i=0; s1[i]==s2[i]; i=i+1)
    if (s1[i]=='\0') return 0;
  return ord(s1[i])-ord(s2[i]);
}

// 文字数制限付きの文字列比較
public int strNcmp(char[] s1, char[] s2, int n) {
  int i;
  for (i=0; i<n && s1[i]==s2[i]; i=i+1)
    if (s1[i]=='\0') return 0;
  if (i>=n) return 0;
  return ord(s1[i])-ord(s2[i]);
}

// 文字列の長さ
public int strLen(char[] s) {
  int i=0;
  while (s[i]!='\0') i=i+1;
  return i;
}

//-- 以下はC言語の関数と仕様が異なる --

// 文字を探す
public int strChr(char[] s, char c) {
  int i;
  for (i=0; s[i]!='\0'; i=i+1)
    if (s[i]==c) return i;
  return -1;
}

// 最後の文字を探す
public int strRchr(char[] s, char c) {
  int i, j=-1;
  for (i=0; s[i]!='\0'; i=i+1)
    if (s[i]==c) j=i;
  return j;
}

// 文字列を探す
public int strStr(char[] s1, char[] s2) {
  int l = strLen(s2);
  int d = strLen(s1) - l;
  for (int i=0; i<d; i=i+1) {
    int j;
    for (j=0; j<l; j=j+1) {
      if (s1[i+j]!=s2[j]) break;
    }
    if (j==l) return i;
  }
  return -1;
}
